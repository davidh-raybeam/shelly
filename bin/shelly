#!/usr/bin/env ruby

require 'shellwords'

require 'shelly'
include Shelly

def print_usage
  puts <<-USAGE
Shelly version #{VERSION}
Usage:
  shelly -h | --help
      Print this message and exit
  shelly -v | --version
      Print the version number and exit
  shelly COMMAND
      Starts a Shelly interpreter with a prefix of COMMAND
  shelly --script COMMAND
      Outputs a ruby script in the current directory which will run a Shelly
      shell with a prefix of COMMAND. This can be used to define custom commands
      or tab completion handlers
  USAGE
end

def output_script(filename, command)
  open(filename, 'w+') do |out|
    out.write <<-EOF
#!/usr/bin/env ruby

require 'shelly'
include Shelly

## To include custom commands, use the following as a template:
# command 'foo',
#     description: 'A brief description of the foo command',
#     usage: '\\foo ARG1 [ARG2]' do |shell, argstring|
#   #
#   #  Your code goes here.
#   #  `shell` is a Shelly::Interpreter object. At the moment, the only method
#   #    it supports is exit!, which causes the interpreter to exit gracefully.
#   #  `argstring` is a string containing everything after the command name.
#   #    For example, the command "\\foo arg1 arg2 arg3" would receive an
#   #    argstring of "arg1 arg2 arg3"
#   #
# end

## Uncomment to specify a custom prompt string:
# prompt '> '

## Uncomment to add a command suffix:
# suffix '| less'

## Uncomment to quote all user input:
# quote_input

## Tab-completion setup:
tab_complete :filenames
## You may pass a block to the above function. If you do, it should take a
## single argument (the partial word as a string) and return a list of
## strings (possible completions).
## Allowed values for the symbol are:
##   :filenames (block optional)
##     Complete file and directory names and evaluate the block (if given),
##     adding its results to the matching files
##   :filenames_before (block required)
##     Attempt to match file and directory names; if none match, use the block
##     instead.
##   :filenames_after (block required)
##     Evaluate the block; if it returns an empty list, match files and
##     directories instead.
##   :only (block required)
##     Evaluate the block only
##   :none (block optional but ignored if provided)
##     Disable tab completion

## Look for user config files in ~/.#{filename}rc
## Options:
##  - Comment to disable user config files
##  - Remove the filename argument to use the default (~/.shellyrc)
load_config_file '.#{filename}rc'

shelly '#{command}'
EOF
  end
end

# ================
# = Main routine =
# ================
if ARGV.empty?
  print_usage
  exit 1
elsif %w{-v --version}.include? ARGV[0]
  puts VERSION
elsif %w{-h --help}.include? ARGV[0]
  print_usage
elsif ARGV[0] == '--script'
  ARGV.shift
  if ARGV.empty?
    print_usage
    exit 1
  end
  
  script_name = "#{File.basename(ARGV[0])}.shelly"
  command = ARGV.shelljoin
  
  output_script(script_name, command)
else
  command = ARGV.shelljoin
  
  load_config_file
  
  shelly command
end